; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\DAVE\Documents\Visual Studio 2013\Projects\WizardWrx_Libs\DLLServices2\StandardHandlesLab\StandardHandlesLab\ProgramIDFromArgV.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_chrArg0IsNull
PUBLIC	_chrArg0IsBlank
PUBLIC	_chrPathDlm
PUBLIC	_chrExtnDlm
PUBLIC	_lpchrArg0IsNull
PUBLIC	_lpchrArg0IsBlank
PUBLIC	_lpchrPathDlm
_DATA	SEGMENT
_chrArg0IsNull DB 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'r', 00H, 's', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'm', 00H, 'I', 00H, 'D', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, 'A', 00H, 'r', 00H, 'g', 00H, 'V', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l'
	DB	00H, 'l', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, '.', 00H, 0aH
	DB	00H, 00H, 00H
	ORG $+6
_chrArg0IsBlank DB 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'r', 00H, 's', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'm', 00H, 'I', 00H, 'D', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, 'A', 00H, 'r', 00H, 'g', 00H, 'V', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'e'
	DB	00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 0aH
	DB	00H, 00H, 00H
	ORG $+2
_chrPathDlm DB	'\', 00H, 00H, 00H
_chrExtnDlm DB	'.', 00H, 00H, 00H
_lpchrArg0IsNull DD FLAT:_chrArg0IsNull
_lpchrArg0IsBlank DD FLAT:_chrArg0IsBlank
_lpchrPathDlm DD FLAT:_chrPathDlm
_DATA	ENDS
PUBLIC	__wcsdec
PUBLIC	_ProgramIDFromArgV@4
EXTRN	__imp__wcslen:PROC
EXTRN	__imp__wcsstr:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\programidfromargv.c
;	COMDAT _ProgramIDFromArgV@4
_TEXT	SEGMENT
tv128 = -304						; size = 4
_intPgmPtrLength$ = -104				; size = 4
_intPgmIdLengthbBytes$ = -92				; size = 4
_fIsFirstDoLoop$ = -80					; size = 4
_fBaseNameIsolated$ = -68				; size = 4
_rlpBaseNameByItself$ = -56				; size = 4
_lpLastExtnDelimiter$ = -44				; size = 4
_lpLastDelimiterScan$ = -32				; size = 4
_lpLastPathDelimiter$ = -20				; size = 4
_lpLastCharacterInString$ = -8				; size = 4
_ppgmptr$ = 8						; size = 4
_ProgramIDFromArgV@4 PROC				; COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 76   : 	TCHAR * lpLastCharacterInString				= NULL ;

	mov	DWORD PTR _lpLastCharacterInString$[ebp], 0

; 77   : 	TCHAR *	lpLastPathDelimiter					= NULL ;

	mov	DWORD PTR _lpLastPathDelimiter$[ebp], 0

; 78   : 	TCHAR *	lpLastDelimiterScan					= NULL ;

	mov	DWORD PTR _lpLastDelimiterScan$[ebp], 0

; 79   : 	TCHAR * lpLastExtnDelimiter					= NULL ;

	mov	DWORD PTR _lpLastExtnDelimiter$[ebp], 0

; 80   : 	TCHAR * rlpBaseNameByItself					= NULL ;

	mov	DWORD PTR _rlpBaseNameByItself$[ebp], 0

; 81   : 
; 82   : 	BOOL	fBaseNameIsolated					= FALSE ;

	mov	DWORD PTR _fBaseNameIsolated$[ebp], 0

; 83   : 	BOOL	fIsFirstDoLoop						= TRUE ;

	mov	DWORD PTR _fIsFirstDoLoop$[ebp], 1

; 84   : 
; 85   : 	int		intPgmIdLengthbBytes				= -1 ;

	mov	DWORD PTR _intPgmIdLengthbBytes$[ebp], -1

; 86   : 	int		intPgmPtrLength						= -1 ;

	mov	DWORD PTR _intPgmPtrLength$[ebp], -1

; 87   : 
; 88   : 	if ( ppgmptr )

	cmp	DWORD PTR _ppgmptr$[ebp], 0
	je	$LN20@ProgramIDF

; 89   : 	{
; 90   : 		intPgmPtrLength							= _tcslen ( ppgmptr ) ;

	mov	esi, esp
	mov	eax, DWORD PTR _ppgmptr$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _intPgmPtrLength$[ebp], eax

; 91   : 
; 92   : 		if ( intPgmPtrLength )

	cmp	DWORD PTR _intPgmPtrLength$[ebp], 0
	je	$LN19@ProgramIDF

; 93   : 		{
; 94   : 			lpLastDelimiterScan					= ( TCHAR * ) ppgmptr ;

	mov	eax, DWORD PTR _ppgmptr$[ebp]
	mov	DWORD PTR _lpLastDelimiterScan$[ebp], eax

; 95   : 			lpLastPathDelimiter					= ( TCHAR * ) ppgmptr ;

	mov	eax, DWORD PTR _ppgmptr$[ebp]
	mov	DWORD PTR _lpLastPathDelimiter$[ebp], eax
$LN18@ProgramIDF:

; 96   : 
; 97   : 			do
; 98   : 			{
; 99   : 				lpLastDelimiterScan				= _tcsstr ( lpLastDelimiterScan ,
; 100  : 															lpchrPathDlm ) ;

	mov	esi, esp
	mov	eax, DWORD PTR _lpchrPathDlm
	push	eax
	mov	ecx, DWORD PTR _lpLastDelimiterScan$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpLastDelimiterScan$[ebp], eax

; 101  : 
; 102  : 				if ( lpLastDelimiterScan )

	cmp	DWORD PTR _lpLastDelimiterScan$[ebp], 0
	je	SHORT $LN15@ProgramIDF

; 103  : 				{
; 104  : 					if ( fIsFirstDoLoop )

	cmp	DWORD PTR _fIsFirstDoLoop$[ebp], 0
	je	SHORT $LN14@ProgramIDF

; 105  : 					{
; 106  : 						fIsFirstDoLoop			= FALSE ;

	mov	DWORD PTR _fIsFirstDoLoop$[ebp], 0
$LN14@ProgramIDF:

; 107  : 					}	// TRUE (degenerate case, where the program name is unqualified) block, if ( fIsFirstDoLoop )
; 108  : 
; 109  : 					lpLastPathDelimiter			= lpLastDelimiterScan ;

	mov	eax, DWORD PTR _lpLastDelimiterScan$[ebp]
	mov	DWORD PTR _lpLastPathDelimiter$[ebp], eax

; 110  : 					lpLastDelimiterScan++ ;

	mov	eax, DWORD PTR _lpLastDelimiterScan$[ebp]
	add	eax, 2
	mov	DWORD PTR _lpLastDelimiterScan$[ebp], eax

; 111  : 				}	// TRUE block, if ( lpLastDelimiterScan )
; 112  : 				else

	jmp	SHORT $LN17@ProgramIDF
$LN15@ProgramIDF:

; 113  : 				{
; 114  : 					if ( fIsFirstDoLoop )

	cmp	DWORD PTR _fIsFirstDoLoop$[ebp], 0
	je	SHORT $LN12@ProgramIDF

; 115  : 					{
; 116  : 						fIsFirstDoLoop			= FALSE ;

	mov	DWORD PTR _fIsFirstDoLoop$[ebp], 0

; 117  : 					}	// TRUE (degenerate case, where the program name is unqualified) block, if ( fIsFirstDoLoop )
; 118  : 					else

	jmp	SHORT $LN17@ProgramIDF
$LN12@ProgramIDF:

; 119  : 					{
; 120  : 						lpLastPathDelimiter++ ;

	mov	eax, DWORD PTR _lpLastPathDelimiter$[ebp]
	add	eax, 2
	mov	DWORD PTR _lpLastPathDelimiter$[ebp], eax
$LN17@ProgramIDF:

; 121  : 					}	// FALSE (standard case, where the programm name is at least partially qualified) block, if ( fIsFirstDoLoop )
; 122  : 				}	// FALSE block, if ( lpLastDelimiterScan )
; 123  : 			} while ( lpLastDelimiterScan ) ;

	cmp	DWORD PTR _lpLastDelimiterScan$[ebp], 0
	jne	SHORT $LN18@ProgramIDF

; 124  : 
; 125  : 			//	----------------------------------------------------------------
; 126  : 			//	Sanity check the string pointer. Find the extension delimiter,
; 127  : 			//	unless it is NULL.
; 128  : 			//	----------------------------------------------------------------
; 129  : 
; 130  : 			if ( lpLastPathDelimiter )

	cmp	DWORD PTR _lpLastPathDelimiter$[ebp], 0
	je	$LN10@ProgramIDF

; 131  : 			{
; 132  : 				lpLastCharacterInString			= ( DWORD_PTR ) ppgmptr + ( ( intPgmPtrLength - 1 ) * sizeof ( TCHAR ) ) ;

	mov	eax, DWORD PTR _intPgmPtrLength$[ebp]
	mov	ecx, DWORD PTR _ppgmptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _lpLastCharacterInString$[ebp], edx

; 133  : 				lpLastExtnDelimiter				= lpLastCharacterInString;

	mov	eax, DWORD PTR _lpLastCharacterInString$[ebp]
	mov	DWORD PTR _lpLastExtnDelimiter$[ebp], eax
$LN9@ProgramIDF:

; 134  : 
; 135  : 				do
; 136  : 				{
; 137  : 					if ( ( TCHAR ) lpLastExtnDelimiter [ 0 ] == chrExtnDlm [ 0 ] )

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lpLastExtnDelimiter$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	ecx, WORD PTR _chrExtnDlm[edx]
	cmp	eax, ecx
	jne	SHORT $LN6@ProgramIDF

; 138  : 					{	// Found extension delimiter.
; 139  : 						fBaseNameIsolated		= TRUE;

	mov	DWORD PTR _fBaseNameIsolated$[ebp], 1

; 140  : 					}	// TRUE (Extension delimiter found.) block, if ( ( TCHAR ) lpLastExtnDelimiter [ 0 ] == chrExtnDlm )
; 141  : 					else

	jmp	SHORT $LN8@ProgramIDF
$LN6@ProgramIDF:

; 142  : 					{
; 143  : 						lpLastExtnDelimiter		= _tcsdec ( ppgmptr ,
; 144  : 							                                lpLastExtnDelimiter ) ;

	mov	eax, DWORD PTR _lpLastExtnDelimiter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppgmptr$[ebp]
	push	ecx
	call	__wcsdec
	add	esp, 8
	mov	DWORD PTR _lpLastExtnDelimiter$[ebp], eax

; 145  : 
; 146  : 						if ( ( DWORD_PTR ) lpLastExtnDelimiter == ( DWORD_PTR ) lpLastPathDelimiter )

	mov	eax, DWORD PTR _lpLastExtnDelimiter$[ebp]
	cmp	eax, DWORD PTR _lpLastPathDelimiter$[ebp]
	jne	SHORT $LN8@ProgramIDF

; 147  : 						{	// Reached the beginning of the base name.
; 148  : 							fBaseNameIsolated	= TRUE;

	mov	DWORD PTR _fBaseNameIsolated$[ebp], 1
$LN8@ProgramIDF:

; 149  : 						}	// if ( ( DWORD_PTR ) lpLastExtnDelimiter == ( DWORD_PTR ) lpLastPathDelimiter )
; 150  : 					}	// TRUE (Extension delimiter not yet found.) block, if ( ( TCHAR ) lpLastExtnDelimiter [ 0 ] == chrExtnDlm )
; 151  : 				}
; 152  : 				while ( !fBaseNameIsolated ) ;

	cmp	DWORD PTR _fBaseNameIsolated$[ebp], 0
	je	SHORT $LN9@ProgramIDF

; 153  : 
; 154  : 				intPgmIdLengthbBytes			=    ( ( DWORD_PTR ) lpLastExtnDelimiter     == ( DWORD_PTR ) lpLastPathDelimiter )
; 155  : 					                               ? ( ( DWORD_PTR ) lpLastCharacterInString -  ( DWORD_PTR ) lpLastPathDelimiter )
; 156  : 												   : ( ( DWORD_PTR ) lpLastExtnDelimiter     -  ( DWORD_PTR ) lpLastPathDelimiter ) ;

	mov	eax, DWORD PTR _lpLastExtnDelimiter$[ebp]
	cmp	eax, DWORD PTR _lpLastPathDelimiter$[ebp]
	jne	SHORT $LN23@ProgramIDF
	mov	ecx, DWORD PTR _lpLastCharacterInString$[ebp]
	sub	ecx, DWORD PTR _lpLastPathDelimiter$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN24@ProgramIDF
$LN23@ProgramIDF:
	mov	edx, DWORD PTR _lpLastExtnDelimiter$[ebp]
	sub	edx, DWORD PTR _lpLastPathDelimiter$[ebp]
	mov	DWORD PTR tv128[ebp], edx
$LN24@ProgramIDF:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR _intPgmIdLengthbBytes$[ebp], eax

; 157  : 
; 158  : 				rlpBaseNameByItself				= HeapAlloc ( GetProcessHeap ( ) ,
; 159  : 					                                          HEAP_ZERO_MEMORY ,
; 160  : 															  intPgmIdLengthbBytes + sizeof ( TCHAR ) ) ;

	mov	eax, DWORD PTR _intPgmIdLengthbBytes$[ebp]
	add	eax, 2
	mov	esi, esp
	push	eax
	push	8
	mov	edi, esp
	call	DWORD PTR __imp__GetProcessHeap@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rlpBaseNameByItself$[ebp], eax

; 161  : 
; 162  : 				memcpy ( rlpBaseNameByItself ,
; 163  : 					     lpLastPathDelimiter ,
; 164  : 						 intPgmIdLengthbBytes ) ;

	mov	eax, DWORD PTR _intPgmIdLengthbBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpLastPathDelimiter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlpBaseNameByItself$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 165  : 
; 166  : 				return rlpBaseNameByItself ;

	mov	eax, DWORD PTR _rlpBaseNameByItself$[ebp]
	jmp	SHORT $LN21@ProgramIDF

; 167  : 			}	// TRUE (expected outcome) block, if ( lpLastPathDelimiter )
; 168  : 			else

	jmp	SHORT $LN3@ProgramIDF
$LN10@ProgramIDF:

; 169  : 			{
; 170  : 				return lpchrArg0IsBlank ;

	mov	eax, DWORD PTR _lpchrArg0IsBlank
	jmp	SHORT $LN21@ProgramIDF
$LN3@ProgramIDF:

; 171  : 			}	// FALSE (UNexpected outcome) block, if ( lpLastPathDelimiter )
; 172  : 		}	// TRUE (expected outcome) block, if ( strlen ( ppgmptr ) )
; 173  : 		else

	jmp	SHORT $LN2@ProgramIDF
$LN19@ProgramIDF:

; 174  : 		{
; 175  : 			return lpchrArg0IsBlank ;

	mov	eax, DWORD PTR _lpchrArg0IsBlank
	jmp	SHORT $LN21@ProgramIDF
$LN2@ProgramIDF:

; 176  : 		}	// FALSE (UNexpected outcome) block, if ( strlen ( ppgmptr ) )
; 177  : 	}	// TRUE (expected outcome) block, if ( ppgmptr )
; 178  : 	else

	jmp	SHORT $LN21@ProgramIDF
$LN20@ProgramIDF:

; 179  : 	{
; 180  : 		return lpchrArg0IsNull ;

	mov	eax, DWORD PTR _lpchrArg0IsNull
$LN21@ProgramIDF:

; 181  : 	}	// FALSE (UNexpected outcome) if ( ppgmptr )
; 182  : }	// LPTSTR ProgramIDFromArgV

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_ProgramIDFromArgV@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\tchar.h
;	COMDAT __wcsdec
_TEXT	SEGMENT
tv66 = -196						; size = 4
__Cpc1$ = 8						; size = 4
__Cpc2$ = 12						; size = 4
__wcsdec PROC						; COMDAT

; 744  : _Check_return_ __inline wchar_t * __CRTDECL _wcsdec(_In_z_ const wchar_t * _Cpc1, _In_z_ const wchar_t * _Cpc2) { return (wchar_t *)((_Cpc1)>=(_Cpc2) ? NULL : ((_Cpc2)-1)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Cpc1$[ebp]
	cmp	eax, DWORD PTR __Cpc2$[ebp]
	jb	SHORT $LN3@wcsdec
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@wcsdec
$LN3@wcsdec:
	mov	ecx, DWORD PTR __Cpc2$[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv66[ebp], ecx
$LN4@wcsdec:
	mov	eax, DWORD PTR tv66[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__wcsdec ENDP
_TEXT	ENDS
END
