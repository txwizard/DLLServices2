; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\DAVE\Documents\Visual Studio 2013\Projects\WizardWrx_Libs\DLLServices2\StandardHandlesLab\StandardHandlesLab\StandardHandlesLab.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_showCrashDialog@@3_NA			; g_showCrashDialog
_BSS	SEGMENT
?g_showCrashDialog@@3_NA DB 01H DUP (?)			; g_showCrashDialog
	ALIGN	4

?hStdConsoleHandles@?1??SHL_PerformTests@@9@0@4PAPAXA DD 03H DUP (?) ; `SHL_PerformTests'::`2'::hStdConsoleHandles
_BSS	ENDS
_DATA	SEGMENT
?dwStdConsoleHandleIDs@?1??SHL_PerformTests@@9@0@4PAKA DD 0fffffff6H ; `SHL_PerformTests'::`2'::dwStdConsoleHandleIDs
	DD	0fffffff5H
	DD	0fffffff4H
?ashsStandardHandleIDs@?1??SHL_PerformTests@@9@0@4PAW4_SHS_STANDARD_HANDLE@@A DD 01H ; `SHL_PerformTests'::`2'::ashsStandardHandleIDs
	DD	02H
	DD	03H
_DATA	ENDS
PUBLIC	_SHL_CrashHandler@4
PUBLIC	_SHL_GetOsVersion@4
PUBLIC	_SHL_PerformTests@0
PUBLIC	_SHL_GetRedirectionTarget@4
PUBLIC	_wmain
PUBLIC	??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BK@PDKDDAF@GetFinalPathNameByHandleW?$AA@ ; `string'
PUBLIC	??_C@_1BE@GJOFHIHD@?$AAn?$AAt?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@		; `string'
EXTRN	__imp__wprintf:PROC
EXTRN	_memset:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetErrorMode@4:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetConsoleMode@8:PROC
EXTRN	__imp__FB_FormatMessageW:PROC
EXTRN	__imp__FB_GetResourceBufferTChars:PROC
EXTRN	__imp__FB_GetlpResourceBufferW:PROC
EXTRN	__imp__FB_LoadStringW:PROC
EXTRN	_SHS_StandardHandleState@4:PROC
EXTRN	_ProgramIDFromArgV@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@
CONST	SEGMENT
??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@ DB 'RtlGetVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GJOFHIHD@?$AAn?$AAt?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GJOFHIHD@?$AAn?$AAt?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'n'
	DB	00H, 't', 00H, 'd', 00H, 'l', 00H, 'l', 00H, '.', 00H, 'd', 00H
	DB	'l', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PDKDDAF@GetFinalPathNameByHandleW?$AA@
CONST	SEGMENT
??_C@_0BK@PDKDDAF@GetFinalPathNameByHandleW?$AA@ DB 'GetFinalPathNameByHa'
	DB	'ndleW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandleslab.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_uintInitialErrorMode$ = -32				; size = 4
_lpPgmID$ = -20						; size = 4
_intRC$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	int intRC		= ERROR_SUCCESS;

	mov	DWORD PTR _intRC$[ebp], 0

; 11   : 	ForceIntoDEebugger;

	mov	esi, esp
	call	DWORD PTR __imp__DebugBreak@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12   : 
; 13   : 	LPTSTR lpPgmID	= ProgramIDFromArgV ( argv [ 0 ] ) ;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_ProgramIDFromArgV@4
	mov	DWORD PTR _lpPgmID$[ebp], eax

; 14   : 
; 15   : 	_tprintf ( 
; 16   : 		FB_LoadString (
; 17   : 			FB_LOOK_IN_THIS_EXE ,
; 18   : 			IDS_BOJ ,
; 19   : 			FB_FIRST_BUFFER_INDEX ,
; 20   : 			FB_HIDE_LENGTH ) ,
; 21   : 		lpPgmID ) ;

	mov	esi, esp
	mov	eax, DWORD PTR _lpPgmID$[ebp]
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	102					; 00000066H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 22   : 
; 23   : 	UINT uintInitialErrorMode = SetErrorMode ( SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS ) ;

	mov	esi, esp
	push	3
	call	DWORD PTR __imp__SetErrorMode@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _uintInitialErrorMode$[ebp], eax

; 24   : 	_tprintf ( 
; 25   : 		FB_LoadString (
; 26   : 			FB_LOOK_IN_THIS_EXE ,
; 27   : 			IDS_NEW_CRT_ERRORMODE ,
; 28   : 			FB_FIRST_BUFFER_INDEX ,
; 29   : 			FB_HIDE_LENGTH ) ,										// Format Control String (template), fed directly into _tprintf.
; 30   : 		uintInitialErrorMode ,										// Original:  Hexadecimal
; 31   : 		uintInitialErrorMode ,										//            Decimal
; 32   : 		SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS ,			// New Value: Hexadecimal
; 33   : 		SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS );			//            Decimal

	mov	esi, esp
	push	3
	push	3
	mov	eax, DWORD PTR _uintInitialErrorMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uintInitialErrorMode$[ebp]
	push	ecx
	mov	edi, esp
	push	0
	push	0
	push	105					; 00000069H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 34   : 	SetUnhandledExceptionFilter ( SHL_CrashHandler );				// From now on, SHL_CrashHandler gets all unhandled exceptions except buffer overruns and such.

	mov	esi, esp
	push	OFFSET _SHL_CrashHandler@4
	call	DWORD PTR __imp__SetUnhandledExceptionFilter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 35   : 
; 36   : 	if ( intRC = SHL_PerformTests ( ) )

	call	_SHL_PerformTests@0
	mov	DWORD PTR _intRC$[ebp], eax
	cmp	DWORD PTR _intRC$[ebp], 0
	je	SHORT $LN1@wmain

; 37   : 	{
; 38   : 		_tprintf (
; 39   : 			FB_FormatMessage ( 
; 40   : 				FB_LoadString (
; 41   : 					FB_LOOK_IN_THIS_EXE , 
; 42   : 					IDS_ERRMSG_GETSTDHANDLE ,
; 43   : 					FB_FIRST_BUFFER_INDEX ,
; 44   : 					FB_HIDE_LENGTH ) ,
; 45   : 				intRC ,
; 46   : 				SCF2_HEXADECIMAL ) );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _intRC$[ebp]
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	111					; 0000006fH
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@wmain:

; 47   : 	}	// if ( intRC = SHL_PerformTests ( ) )
; 48   : 
; 49   : 	_tprintf (
; 50   : 		FB_LoadString (
; 51   : 			FB_LOOK_IN_THIS_EXE ,
; 52   : 			IDS_EOJ ,
; 53   : 			FB_FIRST_BUFFER_INDEX ,
; 54   : 			FB_HIDE_LENGTH ) ,
; 55   : 		lpPgmID ) ;

	mov	esi, esp
	mov	eax, DWORD PTR _lpPgmID$[ebp]
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	103					; 00000067H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 	return intRC;

	mov	eax, DWORD PTR _intRC$[ebp]

; 57   : }	// int _tmain(int argc, _TCHAR* argv[])

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandleslab.cpp
;	COMDAT _SHL_GetRedirectionTarget@4
_TEXT	SEGMENT
_dwFnLen$1 = -340					; size = 4
_faddrGetFinalPathNameByHandle$2 = -328			; size = 4
_hKernel32$3 = -316					; size = 4
_rlpTargetFileName$4 = -304				; size = 4
_osvStruct$5 = -292					; size = 284
__$ArrayPad$ = -4					; size = 4
_phStdHandle$ = 8					; size = 4
_SHL_GetRedirectionTarget@4 PROC			; COMDAT

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 206  : 	if ( phStdHandle )

	cmp	DWORD PTR _phStdHandle$[ebp], 0
	je	$LN14@SHL_GetRed

; 207  : 	{
; 208  : 		/*
; 209  : 			--------------------------------------------------------------------
; 210  : 			DWORD WINAPI GetFinalPathNameByHandle(
; 211  : 				_In_  HANDLE hFile,
; 212  : 				_Out_ LPTSTR lpszFilePath,
; 213  : 				_In_  DWORD  cchFilePath,
; 214  : 				_In_  DWORD  dwFlags
; 215  : 			);
; 216  : 
; 217  : 			This function has ANSI and Unicode (wide character) implementations,
; 218  : 			differentiated by the usual name decorations.
; 219  : 			--------------------------------------------------------------------
; 220  : 		*/
; 221  : 
; 222  : 		typedef DWORD ( WINAPI* tGetFinalPathNameByHandle )( HANDLE , LPTSTR , DWORD , DWORD );
; 223  : 
; 224  : 		RTL_OSVERSIONINFOEXW osvStruct;
; 225  : 		
; 226  : 		if ( SHL_GetOsVersion ( &osvStruct ) )

	lea	eax, DWORD PTR _osvStruct$5[ebp]
	push	eax
	call	_SHL_GetOsVersion@4
	test	eax, eax
	je	$LN13@SHL_GetRed

; 227  : 		{
; 228  : 			if ( osvStruct.dwMajorVersion >= 6 )

	cmp	DWORD PTR _osvStruct$5[ebp+4], 6
	jb	$LN12@SHL_GetRed

; 229  : 			{
; 230  : 				if ( LPSFSBUF rlpTargetFileName = FB_GetlpResourceBuffer ( FB_BUFFER_INDEX_3 ) )

	mov	esi, esp
	push	3
	call	DWORD PTR __imp__FB_GetlpResourceBufferW
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rlpTargetFileName$4[ebp], eax
	cmp	DWORD PTR _rlpTargetFileName$4[ebp], 0
	je	$LN11@SHL_GetRed

; 231  : 				{	// Unless the unthinkable happens, and FB_GetlpResourceBuffer fails... 
; 232  : 					if ( HMODULE hKernel32 = GetModuleHandle ( L"Kernel32.dll" ) )

	mov	esi, esp
	push	OFFSET ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	DWORD PTR __imp__GetModuleHandleW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hKernel32$3[ebp], eax
	cmp	DWORD PTR _hKernel32$3[ebp], 0
	je	$LN10@SHL_GetRed

; 233  : 					{
; 234  : 						if ( tGetFinalPathNameByHandle faddrGetFinalPathNameByHandle = ( tGetFinalPathNameByHandle ) GetProcAddress ( hKernel32 , "GetFinalPathNameByHandleW" ) )

	mov	esi, esp
	push	OFFSET ??_C@_0BK@PDKDDAF@GetFinalPathNameByHandleW?$AA@
	mov	eax, DWORD PTR _hKernel32$3[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _faddrGetFinalPathNameByHandle$2[ebp], eax
	cmp	DWORD PTR _faddrGetFinalPathNameByHandle$2[ebp], 0
	je	$LN9@SHL_GetRed

; 235  : 						{
; 236  : 							if ( DWORD dwFnLen = faddrGetFinalPathNameByHandle (
; 237  : 								phStdHandle ,									// _In_  HANDLE hFile
; 238  : 								( LPWSTR ) rlpTargetFileName ,					// _Out_ LPTSTR lpszFilePath
; 239  : 								FB_GetResourceBufferTChars ( ) ,				// _In_  DWORD  cchFilePath
; 240  : 								FILE_NAME_NORMALIZED ) )						// _In_  DWORD  dwFlags

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__FB_GetResourceBufferTChars
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _rlpTargetFileName$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _phStdHandle$[ebp]
	push	ecx
	call	DWORD PTR _faddrGetFinalPathNameByHandle$2[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwFnLen$1[ebp], eax
	cmp	DWORD PTR _dwFnLen$1[ebp], 0
	je	SHORT $LN8@SHL_GetRed

; 241  : 							{
; 242  : 								return ( LPTSTR ) rlpTargetFileName;

	mov	eax, DWORD PTR _rlpTargetFileName$4[ebp]
	jmp	$LN15@SHL_GetRed

; 243  : 							}	// TRUE (anticipated outcome) block, if ( DWORD dwFnLen = faddrGetFinalPathNameByHandle ( phStdHandle , ( LPWSTR ) rlpTargetFileName , FB_GetResourceBufferTChars ( ) , FILE_NAME_NORMALIZED ) )
; 244  : 							else

	jmp	SHORT $LN7@SHL_GetRed
$LN8@SHL_GetRed:

; 245  : 							{
; 246  : 								return FB_FormatMessage (
; 247  : 									FB_LoadString (
; 248  : 										FB_LOOK_IN_THIS_EXE ,
; 249  : 										IDS_ERRMSG_GETFILENAMEBYHANDLE ,
; 250  : 										FB_FIRST_BUFFER_INDEX ,
; 251  : 										FB_HIDE_LENGTH ) ,
; 252  : 									GetLastError ( ) ,
; 253  : 									SCF2_HEXADECIMAL );

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	115					; 00000073H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN15@SHL_GetRed
$LN7@SHL_GetRed:

; 254  : 							}	// FALSE (UNanticipated outcome) block, if ( DWORD dwFnLen = faddrGetFinalPathNameByHandle ( phStdHandle , ( LPWSTR ) rlpTargetFileName , FB_GetResourceBufferTChars ( ) , FILE_NAME_NORMALIZED ) )
; 255  : 						}	// TRUE (anticipated outcome) block, if ( tGetFinalPathNameByHandle faddrGetFinalPathNameByHandle = ( tGetFinalPathNameByHandle ) GetProcAddress ( hKernel32 , "GetFinalPathNameByHandleW" ) )
; 256  : 						else

	jmp	SHORT $LN6@SHL_GetRed
$LN9@SHL_GetRed:

; 257  : 						{
; 258  : 							return FB_FormatMessage (
; 259  : 								FB_LoadString (
; 260  : 									FB_LOOK_IN_THIS_EXE ,
; 261  : 									IDS_ERRMSG_GETPROCADDRESS ,
; 262  : 									FB_FIRST_BUFFER_INDEX ,
; 263  : 									FB_HIDE_LENGTH ) ,
; 264  : 								GetLastError ( ) ,
; 265  : 								SCF2_HEXADECIMAL );

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	118					; 00000076H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN15@SHL_GetRed
$LN6@SHL_GetRed:

; 266  : 						}	// FALSE (UNanticipated outcome) block, if ( tGetFinalPathNameByHandle faddrGetFinalPathNameByHandle = ( tGetFinalPathNameByHandle ) GetProcAddress ( hKernel32 , "GetFinalPathNameByHandleW" ) )
; 267  : 					}	// TRUE (anticipated outcome) block, if ( HMODULE hKernel32 = GetModuleHandle ( L"Kernel32.dll" ) )
; 268  : 					else

	jmp	SHORT $LN5@SHL_GetRed
$LN10@SHL_GetRed:

; 269  : 					{
; 270  : 						return FB_FormatMessage (
; 271  : 							FB_LoadString (
; 272  : 								FB_LOOK_IN_THIS_EXE ,
; 273  : 								IDS_ERRMSG_GETMODULEHANDLE ,
; 274  : 								FB_FIRST_BUFFER_INDEX ,
; 275  : 								FB_HIDE_LENGTH ) ,
; 276  : 							GetLastError ( ) ,
; 277  : 							SCF2_HEXADECIMAL );

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	119					; 00000077H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN15@SHL_GetRed
$LN5@SHL_GetRed:

; 278  : 					}	// FALSE (UNanticipated outcome) block, if ( HMODULE hKernel32 = GetModuleHandle ( L"Kernel32.dll" ) )
; 279  : 				}	// TRUE (anticipated outcome) block, if ( LPSFSBUF rlpTargetFileName = FB_GetlpResourceBuffer ( FB_BUFFER_INDEX_3 ) )
; 280  : 				else

	jmp	SHORT $LN4@SHL_GetRed
$LN11@SHL_GetRed:

; 281  : 				{
; 282  : 					return FB_FormatMessage (
; 283  : 						FB_LoadString (
; 284  : 							FB_LOOK_IN_THIS_EXE ,
; 285  : 							IDS_ERRMSG_GETLPRESOURCEBUFFER ,
; 286  : 							FB_FIRST_BUFFER_INDEX ,
; 287  : 							FB_HIDE_LENGTH ) ,
; 288  : 						GetLastError ( ) ,
; 289  : 						SCF2_HEXADECIMAL );

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	116					; 00000074H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN15@SHL_GetRed
$LN4@SHL_GetRed:

; 290  : 				}	// FALSE (UNanticipated outcome) block, if ( LPSFSBUF rlpTargetFileName = FB_GetlpResourceBuffer ( FB_BUFFER_INDEX_3 ) )
; 291  : 			}	// TRUE (anticipated outcome) block, if ( osvStruct.dwMajorVersion >= 6 )
; 292  : 			else

	jmp	SHORT $LN3@SHL_GetRed
$LN12@SHL_GetRed:

; 293  : 			{
; 294  : 				return FB_LoadString (
; 295  : 					FB_LOOK_IN_THIS_EXE ,
; 296  : 					IDS_ERRMSG_UNSUPPORTED_FEATURE ,
; 297  : 					FB_FIRST_BUFFER_INDEX ,
; 298  : 					FB_HIDE_LENGTH );

	mov	esi, esp
	push	0
	push	0
	push	114					; 00000072H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN15@SHL_GetRed
$LN3@SHL_GetRed:

; 299  : 			}	// FALSE (UNanticipated outcome) block, if ( osvStruct.dwMajorVersion >= 6 )
; 300  : 		}	// TRUE (anticipated outcome) block, if ( GetVersionEx ( &osvStruct ) )
; 301  : 		else

	jmp	SHORT $LN2@SHL_GetRed
$LN13@SHL_GetRed:

; 302  : 		{
; 303  : 			return FB_FormatMessage (
; 304  : 				FB_LoadString (
; 305  : 					FB_LOOK_IN_THIS_EXE ,
; 306  : 					IDS_ERRMSG_GETVERSIONINFOEX ,
; 307  : 					FB_FIRST_BUFFER_INDEX ,
; 308  : 					FB_HIDE_LENGTH ) ,
; 309  : 				GetLastError ( ) ,
; 310  : 				SCF2_HEXADECIMAL );

	mov	esi, esp
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edi, esp
	push	0
	push	0
	push	113					; 00000071H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__FB_FormatMessageW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN15@SHL_GetRed
$LN2@SHL_GetRed:

; 311  : 		}	// FALSE (UNanticipated outcome) block, if ( GetVersionEx ( &osvStruct ) )
; 312  : 	}	// TRUE (anticipated outcome) block, if ( phStdHandle )
; 313  : 	else

	jmp	SHORT $LN15@SHL_GetRed
$LN14@SHL_GetRed:

; 314  : 	{
; 315  : 		return FB_LoadString (
; 316  : 			FB_LOOK_IN_THIS_EXE , 
; 317  : 			IDS_ERRMSG_HANDLE_IS_NULL , 
; 318  : 			FB_BUFFER_INDEX_4 , 
; 319  : 			FB_HIDE_LENGTH );

	mov	esi, esp
	push	0
	push	4
	push	112					; 00000070H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@SHL_GetRed:

; 320  : 	}	// FALSE (UNanticipated outcome) block, if ( phStdHandle )
; 321  : }	// LPTSTR __stdcall SHL_GetRedirectionTarget

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@SHL_GetRed
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@SHL_GetRed:
	DD	1
	DD	$LN18@SHL_GetRed
$LN18@SHL_GetRed:
	DD	-292					; fffffedcH
	DD	284					; 0000011cH
	DD	$LN17@SHL_GetRed
$LN17@SHL_GetRed:
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	118					; 00000076H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_SHL_GetRedirectionTarget@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandleslab.cpp
;	COMDAT _SHL_PerformTests@0
_TEXT	SEGMENT
tv137 = -280						; size = 4
tv74 = -280						; size = 4
_dwStatusCode$1 = -80					; size = 4
_shsHandleState$2 = -68					; size = 4
_uintIndex$3 = -56					; size = 4
_lpTargetFileName$ = -44				; size = 4
_lpHandleMessage$ = -32					; size = 4
_lpHandleLabel$ = -20					; size = 4
_dwModde$ = -8						; size = 4
_SHL_PerformTests@0 PROC				; COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 81   : #define SHL_STDIN	ARRAY_FIRST_ELEMENT_P6C
; 82   : #define SHL_STDOUT	( SHL_STDIN  + ARRAY_NEXT_ELEMENT_P6C )
; 83   : #define SHL_STERR	( SHL_STDOUT + ARRAY_NEXT_ELEMENT_P6C )
; 84   : #define SHL_1ST_LBL	IDS_HANDLE_STDIN
; 85   : 
; 86   : 	static HANDLE hStdConsoleHandles [ ] =
; 87   : 	{
; 88   : 		NULL ,														// SHL_STDIN
; 89   : 		NULL ,														// SHL_STDOUT
; 90   : 		NULL														// SHL_STERR
; 91   : 	};	// static HFILE hStdConsoleHandles [ ]
; 92   : 
; 93   : 	static DWORD dwStdConsoleHandleIDs [ ] =
; 94   : 	{
; 95   : 		STD_INPUT_HANDLE ,											// SHL_STDIN
; 96   : 		STD_OUTPUT_HANDLE ,											// SHL_STDOUT
; 97   : 		STD_ERROR_HANDLE											// SHL_STERR
; 98   : 	};	// static DWORD dwStdConsoleHandleIDs [ ]
; 99   : 
; 100  : 	static SHS_STANDARD_HANDLE ashsStandardHandleIDs [ ]
; 101  : 	{
; 102  : 		SHS_INPUT ,													// Value = 1, which corresponds to STD_INPUT_HANDLE
; 103  : 		SHS_OUTPUT ,												// Value = 2, which corresponds to STD_OUTPUT_HANDLE
; 104  : 		SHS_ERROR 													// Value = 3, which corresponds to STD_ERROR_HANDLE
; 105  : 	};	// static SHS_STANDARD_HANDLE ashsStandardHandleIDs [ ]
; 106  : 
; 107  : 	DWORD dwModde = ZERO_P6C;

	mov	DWORD PTR _dwModde$[ebp], 0

; 108  : 
; 109  : 	LPTSTR lpHandleLabel = NULL;

	mov	DWORD PTR _lpHandleLabel$[ebp], 0

; 110  : 	LPTSTR lpHandleMessage = NULL;

	mov	DWORD PTR _lpHandleMessage$[ebp], 0

; 111  : 	LPTSTR lpTargetFileName = NULL;

	mov	DWORD PTR _lpTargetFileName$[ebp], 0

; 112  : 
; 113  : 	for ( UINT uintIndex = ARRAY_FIRST_ELEMENT_P6C;

	mov	DWORD PTR _uintIndex$3[ebp], 0

; 114  : 		       uintIndex < sizeof ( hStdConsoleHandles ) / sizeof ( HFILE );

	jmp	SHORT $LN13@SHL_Perfor
$LN12@SHL_Perfor:

; 115  : 		       uintIndex++ )

	mov	eax, DWORD PTR _uintIndex$3[ebp]
	add	eax, 1
	mov	DWORD PTR _uintIndex$3[ebp], eax
$LN13@SHL_Perfor:
	cmp	DWORD PTR _uintIndex$3[ebp], 3
	jae	$LN11@SHL_Perfor

; 116  : 	{
; 117  : 		lpHandleLabel = FB_LoadString (
; 118  : 			FB_LOOK_IN_THIS_EXE ,
; 119  : 			SHL_1ST_LBL + uintIndex ,
; 120  : 			FB_FIRST_BUFFER_INDEX ,
; 121  : 			FB_HIDE_LENGTH ) ;

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _uintIndex$3[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpHandleLabel$[ebp], eax

; 122  : 
; 123  : 		if ( ( hStdConsoleHandles [ uintIndex ] = GetStdHandle ( dwStdConsoleHandleIDs [ uintIndex ] ) ) != INVALID_HANDLE_VALUE )

	mov	esi, esp
	mov	eax, DWORD PTR _uintIndex$3[ebp]
	mov	ecx, DWORD PTR ?dwStdConsoleHandleIDs@?1??SHL_PerformTests@@9@0@4PAKA[eax*4]
	push	ecx
	call	DWORD PTR __imp__GetStdHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	edx, DWORD PTR _uintIndex$3[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR ?hStdConsoleHandles@?1??SHL_PerformTests@@9@0@4PAPAXA[edx*4], eax
	cmp	DWORD PTR tv74[ebp], -1
	je	$LN10@SHL_Perfor

; 124  : 		{
; 125  : 			if ( GetConsoleMode ( hStdConsoleHandles [ uintIndex ] , &dwModde ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwModde$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uintIndex$3[ebp]
	mov	edx, DWORD PTR ?hStdConsoleHandles@?1??SHL_PerformTests@@9@0@4PAPAXA[ecx*4]
	push	edx
	call	DWORD PTR __imp__GetConsoleMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN9@SHL_Perfor

; 126  : 			{
; 127  : 				lpHandleMessage = FB_LoadString (
; 128  : 					FB_LOOK_IN_THIS_EXE ,
; 129  : 					IDS_MSG_HANDLE_IS_DEFAULT ,
; 130  : 					FB_BUFFER_INDEX_1 ,
; 131  : 					FB_HIDE_LENGTH );

	mov	esi, esp
	push	0
	push	1
	push	106					; 0000006aH
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpHandleMessage$[ebp], eax

; 132  : 				lpTargetFileName = NULL;

	mov	DWORD PTR _lpTargetFileName$[ebp], 0

; 133  : 			}	// TRUE (The handle is attached to the console.) block, if ( GetConsoleMode ( hStdConsoleHandles [ uintIndex ] , &dwModde ) )
; 134  : 			else

	jmp	SHORT $LN8@SHL_Perfor
$LN9@SHL_Perfor:

; 135  : 			{
; 136  : 				lpHandleMessage = FB_LoadString (
; 137  : 					FB_LOOK_IN_THIS_EXE ,
; 138  : 					IDS_MSG_HANDLE_IS_REDIRECTED ,
; 139  : 					FB_BUFFER_INDEX_1 ,
; 140  : 					FB_HIDE_LENGTH );

	mov	esi, esp
	push	0
	push	1
	push	107					; 0000006bH
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpHandleMessage$[ebp], eax

; 141  : 				lpTargetFileName = SHL_GetRedirectionTarget ( hStdConsoleHandles [ uintIndex ] ) ;

	mov	eax, DWORD PTR _uintIndex$3[ebp]
	mov	ecx, DWORD PTR ?hStdConsoleHandles@?1??SHL_PerformTests@@9@0@4PAPAXA[eax*4]
	push	ecx
	call	_SHL_GetRedirectionTarget@4
	mov	DWORD PTR _lpTargetFileName$[ebp], eax
$LN8@SHL_Perfor:

; 142  : 			}	// FALSE (The handle is redirected.) block, if ( GetConsoleMode ( hStdConsoleHandles [ uintIndex ] , &dwModde ) )
; 143  : 
; 144  : 			_tprintf (
; 145  : 				lpHandleMessage ,									// Format Control String (template)
; 146  : 				lpHandleLabel );									// Descriptive label.

	mov	esi, esp
	mov	eax, DWORD PTR _lpHandleLabel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpHandleMessage$[ebp]
	push	ecx
	call	DWORD PTR __imp__wprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 147  : 
; 148  : 			SHS_HANDLE_STATE shsHandleState = SHS_StandardHandleState ( ashsStandardHandleIDs [ uintIndex ] );

	mov	eax, DWORD PTR _uintIndex$3[ebp]
	mov	ecx, DWORD PTR ?ashsStandardHandleIDs@?1??SHL_PerformTests@@9@0@4PAW4_SHS_STANDARD_HANDLE@@A[eax*4]
	push	ecx
	call	_SHS_StandardHandleState@4
	mov	DWORD PTR _shsHandleState$2[ebp], eax

; 149  : 			
; 150  : 			switch ( shsHandleState )

	mov	eax, DWORD PTR _shsHandleState$2[ebp]
	mov	DWORD PTR tv137[ebp], eax
	cmp	DWORD PTR tv137[ebp], 1
	je	SHORT $LN5@SHL_Perfor
	cmp	DWORD PTR tv137[ebp], 2
	je	SHORT $LN4@SHL_Perfor
	jmp	SHORT $LN3@SHL_Perfor
$LN5@SHL_Perfor:

; 151  : 			{
; 152  : 				case SHS_ATTACHED:
; 153  : 					_tprintf (
; 154  : 						FB_LoadString (
; 155  : 							FB_LOOK_IN_THIS_EXE ,
; 156  : 							IDS_ATTACHED_PER_SHS_STANDARDHANDLESTATE ,
; 157  : 							FB_BUFFER_INDEX_1 ,
; 158  : 							FB_HIDE_LENGTH ) );

	mov	esi, esp
	push	0
	push	1
	push	120					; 00000078H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : 					break;											// case SHS_ATTACHED

	jmp	SHORT $LN6@SHL_Perfor
$LN4@SHL_Perfor:

; 160  : 
; 161  : 				case SHS_REDIRECTED:
; 162  : 					_tprintf (
; 163  : 						FB_LoadString (
; 164  : 							FB_LOOK_IN_THIS_EXE ,
; 165  : 							IDS_REDIRECTED_PER_SHS_STANDARDHANDLESTATE ,
; 166  : 							FB_BUFFER_INDEX_1 ,
; 167  : 							FB_HIDE_LENGTH ) );

	mov	esi, esp
	push	0
	push	1
	push	121					; 00000079H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 168  : 					break;											// case SHS_REDIRECTED:

	jmp	SHORT $LN6@SHL_Perfor
$LN3@SHL_Perfor:

; 169  : 
; 170  : 				default:
; 171  : 					DWORD dwStatusCode = GetLastError ( );

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStatusCode$1[ebp], eax

; 172  : 					_tprintf (
; 173  : 						FB_LoadString (
; 174  : 							FB_LOOK_IN_THIS_EXE ,
; 175  : 							IDS_ERRMSG_STD_HANDLE_STATE ,
; 176  : 							FB_BUFFER_INDEX_1 ,
; 177  : 							FB_HIDE_LENGTH ) ,
; 178  : 						dwStatusCode ,
; 179  : 						dwStatusCode );

	mov	esi, esp
	mov	eax, DWORD PTR _dwStatusCode$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwStatusCode$1[ebp]
	push	ecx
	mov	edi, esp
	push	0
	push	1
	push	122					; 0000007aH
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@SHL_Perfor:

; 180  : 					break;											// SHS_StandardHandleState reported an error.
; 181  : 			}	// switch ( shsHandleState )
; 182  : 
; 183  : 			if ( lpTargetFileName )

	cmp	DWORD PTR _lpTargetFileName$[ebp], 0
	je	SHORT $LN2@SHL_Perfor

; 184  : 			{	// Unless the handle is redirected, lpTargetFileName is NULL.
; 185  : 				_tprintf (
; 186  : 					FB_LoadString (
; 187  : 						FB_LOOK_IN_THIS_EXE ,
; 188  : 						IDS_MSG_REDIRECTION_TARGET ,
; 189  : 						FB_BUFFER_INDEX_2 ,
; 190  : 						FB_HIDE_LENGTH ) ,
; 191  : 					lpTargetFileName );

	mov	esi, esp
	mov	eax, DWORD PTR _lpTargetFileName$[ebp]
	push	eax
	mov	edi, esp
	push	0
	push	2
	push	117					; 00000075H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SHL_Perfor:

; 192  : 			}	// if ( lpTargetFileName )
; 193  : 		}	// TRUE (anticipated outcome) block, if ( ( hStdConsoleHandles [ uintIndex ] = GetStdHandle ( dwStdConsoleHandleIDs [ uintIndex ] ) ) != INVALID_HANDLE_VALUE )
; 194  : 		else

	jmp	SHORT $LN1@SHL_Perfor
$LN10@SHL_Perfor:

; 195  : 		{
; 196  : 			return GetLastError ( );

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN14@SHL_Perfor
$LN1@SHL_Perfor:

; 197  : 		}	// FALSE (UNanticipated outcome) block, if ( ( hStdConsoleHandles [ uintIndex ] = GetStdHandle ( dwStdConsoleHandleIDs [ uintIndex ] ) ) != INVALID_HANDLE_VALUE )
; 198  : 	}	// for ( UINT uintIndex = ARRAY_FIRST_ELEMENT_P6C; uintIndex < sizeof ( hStdConsoleHandle ) / sizeof ( HFILE ); uintIndex++ )

	jmp	$LN12@SHL_Perfor
$LN11@SHL_Perfor:

; 199  : 
; 200  : 	return ERROR_SUCCESS ;

	xor	eax, eax
$LN14@SHL_Perfor:

; 201  : }	// int __stdcall SHL_PerformTests

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SHL_Perfor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@SHL_Perfor:
	DD	1
	DD	$LN17@SHL_Perfor
$LN17@SHL_Perfor:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN16@SHL_Perfor
$LN16@SHL_Perfor:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_SHL_PerformTests@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandleslab.cpp
;	COMDAT _SHL_GetOsVersion@4
_TEXT	SEGMENT
tv77 = -220						; size = 4
_fRtlGetVersion$1 = -20					; size = 4
_hNtDll$ = -8						; size = 4
_pk_OsVer$ = 8						; size = 4
_SHL_GetOsVersion@4 PROC				; COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 326  : 	// RTL_OSVERSIONINFOEXW is defined in winnt.h.
; 327  : 	typedef LONG ( WINAPI* tRtlGetVersion )( RTL_OSVERSIONINFOEXW* );
; 328  : 
; 329  : 	memset ( pk_OsVer ,												// Starting address
; 330  : 		     0 ,													// Initialization constant
; 331  : 			 sizeof ( RTL_OSVERSIONINFOEXW ) );						// Bytes to initialize

	push	284					; 0000011cH
	push	0
	mov	eax, DWORD PTR _pk_OsVer$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 332  : 	pk_OsVer->dwOSVersionInfoSize = sizeof ( RTL_OSVERSIONINFOEXW );

	mov	eax, DWORD PTR _pk_OsVer$[ebp]
	mov	DWORD PTR [eax], 284			; 0000011cH

; 333  : 
; 334  : 	HMODULE hNtDll = GetModuleHandleW ( L"ntdll.dll" );				// ntdll.dll is already loaded.

	mov	esi, esp
	push	OFFSET ??_C@_1BE@GJOFHIHD@?$AAn?$AAt?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	DWORD PTR __imp__GetModuleHandleW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hNtDll$[ebp], eax

; 335  : 
; 336  : 	if ( tRtlGetVersion fRtlGetVersion = ( tRtlGetVersion ) GetProcAddress ( hNtDll , "RtlGetVersion" ) )

	mov	esi, esp
	push	OFFSET ??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@
	mov	eax, DWORD PTR _hNtDll$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fRtlGetVersion$1[ebp], eax
	cmp	DWORD PTR _fRtlGetVersion$1[ebp], 0
	je	SHORT $LN2@SHL_GetOsV

; 337  : 		return ( fRtlGetVersion ( pk_OsVer ) ) == ERROR_SUCCESS;

	mov	esi, esp
	mov	eax, DWORD PTR _pk_OsVer$[ebp]
	push	eax
	call	DWORD PTR _fRtlGetVersion$1[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@SHL_GetOsV
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN6@SHL_GetOsV
$LN5@SHL_GetOsV:
	mov	DWORD PTR tv77[ebp], 0
$LN6@SHL_GetOsV:
	mov	eax, DWORD PTR tv77[ebp]
	jmp	SHORT $LN3@SHL_GetOsV

; 338  : 	else

	jmp	SHORT $LN3@SHL_GetOsV
$LN2@SHL_GetOsV:

; 339  : 		return FALSE;												// This will never happen, since all processes load ntdll.dll.

	xor	eax, eax
$LN3@SHL_GetOsV:

; 340  : }	// BOOL __stdcall SHL_GetOsVersion

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_SHL_GetOsVersion@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandleslab.cpp
;	COMDAT _SHL_CrashHandler@4
_TEXT	SEGMENT
tv84 = -196						; size = 4
_plpExceptionPtrs$ = 8					; size = 4
_SHL_CrashHandler@4 PROC				; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	_tprintf (
; 66   : 		FB_LoadString (
; 67   : 			FB_LOOK_IN_THIS_EXE ,
; 68   : 			IDS_ERRMSG_UNHANDLED_EXCEPTION ,
; 69   : 			FB_FIRST_BUFFER_INDEX ,
; 70   : 			FB_HIDE_LENGTH ) ,										// Format Control String (template)
; 71   : 		plpExceptionPtrs->ExceptionRecord->ExceptionCode ,			// Exception Code:		Hexadecimal
; 72   : 		plpExceptionPtrs->ExceptionRecord->ExceptionCode ,			//						Decimal
; 73   : 		plpExceptionPtrs->ExceptionRecord->ExceptionAddress ,		// Exception Address:	Hexadecimal
; 74   : 		plpExceptionPtrs->ExceptionRecord->ExceptionAddress ) ;		//						Decimal

	mov	eax, DWORD PTR _plpExceptionPtrs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _plpExceptionPtrs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _plpExceptionPtrs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _plpExceptionPtrs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	edi, esp
	push	0
	push	0
	push	104					; 00000068H
	push	0
	call	DWORD PTR __imp__FB_LoadStringW
	add	esp, 16					; 00000010H
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__wprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 75   : 	return g_showCrashDialog ? EXCEPTION_CONTINUE_SEARCH : EXCEPTION_EXECUTE_HANDLER ;

	movzx	eax, BYTE PTR ?g_showCrashDialog@@3_NA	; g_showCrashDialog
	test	eax, eax
	je	SHORT $LN3@SHL_CrashH
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN4@SHL_CrashH
$LN3@SHL_CrashH:
	mov	DWORD PTR tv84[ebp], 1
$LN4@SHL_CrashH:
	mov	eax, DWORD PTR tv84[ebp]

; 76   : }	// SHL_CrashHandler

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_SHL_CrashHandler@4 ENDP
_TEXT	ENDS
END
