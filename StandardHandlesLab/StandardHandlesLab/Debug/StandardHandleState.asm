; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\DAVE\Documents\Visual Studio 2013\Projects\WizardWrx_Libs\DLLServices2\StandardHandlesLab\StandardHandlesLab\StandardHandleState.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_dwStdConsoleHandleIDs DD 0ffffffffH
	DD	0fffffff6H
	DD	0fffffff5H
	DD	0fffffff4H
	DD	0ffffffffH
_DATA	ENDS
PUBLIC	_SHS_StandardHandleState@4
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetConsoleMode@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\dave\documents\visual studio 2013\projects\wizardwrx_libs\dllservices2\standardhandleslab\standardhandleslab\standardhandlestate.c
;	COMDAT _SHS_StandardHandleState@4
_TEXT	SEGMENT
tv64 = -220						; size = 4
_dwModde$ = -20						; size = 4
_hThis$ = -8						; size = 4
_penmStdHandleID$ = 8					; size = 4
_SHS_StandardHandleState@4 PROC				; COMDAT

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 98   : 	HANDLE hThis ;												// The first use of this variable initializes it.
; 99   : 	DWORD dwModde ;												// The first use of this variable initializes it, AND it's a throwaway.
; 100  : 
; 101  : 	switch ( penmStdHandleID )

	mov	eax, DWORD PTR _penmStdHandleID$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN9@SHS_Standa
	cmp	DWORD PTR tv64[ebp], 0
	jle	$LN1@SHS_Standa
	cmp	DWORD PTR tv64[ebp], 3
	jle	SHORT $LN8@SHS_Standa
	jmp	$LN1@SHS_Standa
$LN9@SHS_Standa:

; 102  : 	{
; 103  : 		case SHS_UNDEFINED :									// Argument penmStdHandleID is uninitialized.
; 104  : 			return SHS_UNDETERMINABLE;

	xor	eax, eax
	jmp	$LN12@SHS_Standa
$LN8@SHS_Standa:

; 105  : 
; 106  : 		case SHS_INPUT  :
; 107  : 		case SHS_OUTPUT :
; 108  : 		case SHS_ERROR  :
; 109  : 			if ( ( hThis = GetStdHandle ( dwStdConsoleHandleIDs [ ( int ) penmStdHandleID ] ) ) != INVALID_HANDLE_VALUE )

	mov	esi, esp
	mov	eax, DWORD PTR _penmStdHandleID$[ebp]
	mov	ecx, DWORD PTR _dwStdConsoleHandleIDs[eax*4]
	push	ecx
	call	DWORD PTR __imp__GetStdHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hThis$[ebp], eax
	cmp	DWORD PTR _hThis$[ebp], -1
	je	SHORT $LN7@SHS_Standa

; 110  : 			{
; 111  : 				if ( GetConsoleMode ( hThis , &dwModde ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwModde$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hThis$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetConsoleMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@SHS_Standa

; 112  : 				{
; 113  : 					return SHS_ATTACHED;

	mov	eax, 1
	jmp	SHORT $LN12@SHS_Standa

; 114  : 				}	// TRUE (Handle is attached to its console.) block, if ( GetConsoleMode ( hThis , &dwModde ) )
; 115  : 				else

	jmp	SHORT $LN5@SHS_Standa
$LN6@SHS_Standa:

; 116  : 				{
; 117  : 					if ( GetLastError ( ) == ERROR_INVALID_HANDLE )

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 6
	jne	SHORT $LN4@SHS_Standa

; 118  : 					{
; 119  : 						SetLastError ( ERROR_SUCCESS );

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 120  : 						return SHS_REDIRECTED;

	mov	eax, 2
	jmp	SHORT $LN12@SHS_Standa

; 121  : 					}	// TRUE (anticipated outcome) block, if ( GetLastError ( ) == ERROR_INVALID_HANDLE )
; 122  : 					else

	jmp	SHORT $LN5@SHS_Standa
$LN4@SHS_Standa:

; 123  : 					{
; 124  : 						return SHS_SYSTEM_ERROR;

	mov	eax, 3
	jmp	SHORT $LN12@SHS_Standa
$LN5@SHS_Standa:

; 125  : 					}	// FALSE (UNanticipated outcome) block, if ( GetLastError ( ) == ERROR_INVALID_HANDLE )
; 126  : 				}	// FALSE (Handle is redirected from its console into a file or pipe.) block, if ( GetConsoleMode ( hThis , &dwModde ) )
; 127  : 			}	// TRUE (anticipated outcome) block, if ( ( hThis = GetStdHandle ( dwStdConsoleHandleIDs [ ( int ) penmStdHandleID ] ) ) != INVALID_HANDLE_VALUE )
; 128  : 			else

	jmp	SHORT $LN1@SHS_Standa
$LN7@SHS_Standa:

; 129  : 			{
; 130  : 				return SHS_SYSTEM_ERROR;

	mov	eax, 3
	jmp	SHORT $LN12@SHS_Standa
$LN1@SHS_Standa:

; 131  : 			}	// FALSE (UNanticipated outcome) block, if ( ( hThis = GetStdHandle ( dwStdConsoleHandleIDs [ ( int ) penmStdHandleID ] ) ) != INVALID_HANDLE_VALUE )
; 132  : 
; 133  : 		default:												// Argument penmStdHandleID is out of range.
; 134  : 			return SHS_SYSTEM_ERROR;

	mov	eax, 3
$LN12@SHS_Standa:

; 135  : 	}	// switch ( penmStdHandleID )
; 136  : }	// SHS_HANDLE_STATE SHS_STANDARDHANDLESTATE_API SHS_StandardHandleState

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SHS_Standa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN16@SHS_Standa:
	DD	1
	DD	$LN15@SHS_Standa
$LN15@SHS_Standa:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@SHS_Standa
$LN14@SHS_Standa:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_SHS_StandardHandleState@4 ENDP
_TEXT	ENDS
END
