<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DEFAULT_EVENT_SOURCE_ID" xml:space="preserve">
    <value>DefaultWindowsEventSourceID</value>
    <comment>If present, the ExceptionLogger class reads this string into its private event source ID string, and uses it as its default event source ID.</comment>
  </data>
  <data name="ERRMSG_ARGNAME_TPL" xml:space="preserve">
    <value>Argument Name    = {0}{1}</value>
    <comment>Argument exception reports use this template to display the argument name in a way that makes it easier to find.</comment>
  </data>
  <data name="ERRMSG_ARGVALUE_TPL" xml:space="preserve">
    <value>Argument Value   = {0}{1}</value>
    <comment>Argument exception reports use this template to display the argument value in a way that makes it easier to find.</comment>
  </data>
  <data name="ERRMSG_ASM_SUBSYSTEM" xml:space="preserve">
    <value>While attempting to identify the subsystem of {0}, GetExeSubsystem returned exit code {1}: {2}</value>
    <comment>The system is in serious trouble if this message appears.</comment>
  </data>
  <data name="ERRMSG_EMBEDDED_RESOURCE_NOT_FOUND" xml:space="preserve">
    <value>Resource {0} cannot be found in assembly {1}.</value>
    <comment>Method LoadBinaryResourceFromAnyAssembly formats a message from this template to report a missing resource.</comment>
  </data>
  <data name="ERRMSG_EMBEDDED_RESOURCE_READ_ERROR" xml:space="preserve">
    <value>An error occurred while reading data from resources embedded in an assembly.{3}Assembly Full Name     = {0}{3}Internal Resource Name = {1}{3}I/O Error Message      = {2}{3}{3}The associated Inner Exception may contain additional clues.</value>
    <comment>The LoadBinaryResourceFromAnyAssembly method constructs a message to accomapny exception reports.</comment>
  </data>
  <data name="ERRMSG_EMBEDDED_RESOURCE_READ_TRUNCATED" xml:space="preserve">
    <value>An error occurred while reading a file from resources embedded in an assembly.{3}Internal Name = {0}{3}Expected File Length (bytes) = {1}{3}Bytes successfully read = {2}</value>
    <comment>Method LoadBinaryResourceFromAnyAssembly formats a message from this template to report a read error.</comment>
  </data>
  <data name="ERRMSG_EX_EVTMSG_TPL" xml:space="preserve">
    <value>An {0} exception was caught in routine {1}:{3}               Message          = {2}{3}</value>
    <comment>This is the standard message template used by all exception reporting routines in the ExceptionLogger class.</comment>
  </data>
  <data name="ERRMSG_EX_MSG_TPL" xml:space="preserve">
    <value>An {0} exception was caught in routine {1}:{3}               Message          = {2}{3}</value>
    <comment>This is the standard message template used by all exception reporting routines in the ExceptionLogger class.</comment>
  </data>
  <data name="ERRMSG_FILENAME_TPL" xml:space="preserve">
    <value>File Name        = {0}{1}</value>
  </data>
  <data name="ERRMSG_FORMATSTRING_TPL" xml:space="preserve">
    <value>Format String    = {0}{1}</value>
  </data>
  <data name="ERRMSG_INNER" xml:space="preserve">
    <value>Inner Exception:{1}               Message          = {0}{1}</value>
  </data>
  <data name="ERRMSG_METHOD" xml:space="preserve">
    <value>Exception Method = {0}{1}</value>
  </data>
  <data name="ERRMSG_OBJNAME_TPL" xml:space="preserve">
    <value>Object Name      = {0}{1}</value>
  </data>
  <data name="ERRMSG_SOURCE" xml:space="preserve">
    <value>Exception Source = {0}{1}</value>
  </data>
  <data name="ERRMSG_UNBALANCED" xml:space="preserve">
    <value>The sizes of internal tables s_astrTrimStart and s_astrExceptionTypeNames are unequal.{2}    s_astrTrimStart Elemnent Count          = {0}{2}    s_astrExceptionTypeNames  Elemnent Count = {1}{2}</value>
  </data>
  <data name="FATAL_EXCEPTION_BACKCOLOR" xml:space="preserve">
    <value>FatalExceptionBackgroundColor</value>
    <comment>Key Name of FatalExceptionBackgroundColor Property</comment>
  </data>
  <data name="FATAL_EXCEPTION_FORECOLOR" xml:space="preserve">
    <value>FatalExceptionTextColor</value>
    <comment>Key Name of FatalExceptionTextColor Property</comment>
  </data>
  <data name="IMAGE_SUBSYSTEM_EFI_APPLICATION" xml:space="preserve">
    <value>Image is an EFI Application.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER" xml:space="preserve">
    <value>Image is a EFI Boot Service Driver.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_EFI_ROM" xml:space="preserve">
    <value>Image runs from a EFI ROM.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER" xml:space="preserve">
    <value>Image is a EFI Runtime Driver.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_NATIVE" xml:space="preserve">
    <value>Image doesn't require a subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_NATIVE_WINDOWS" xml:space="preserve">
    <value>Image is a native Win9x driver.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_OS2_CUI" xml:space="preserve">
    <value>Image runs in the OS/2 character subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_POSIX_CUI" xml:space="preserve">
    <value>Image runs in the Posix character subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_UNDEFINED_VALUE" xml:space="preserve">
    <value>The specified image subsystem ID, {0} is undefined.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_UNKNOWN" xml:space="preserve">
    <value>Unknown subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_WINDOWS_CE_GUI" xml:space="preserve">
    <value>Image runs in the Windows CE subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_WINDOWS_CUI" xml:space="preserve">
    <value>Image runs in the Windows character subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_WINDOWS_GUI" xml:space="preserve">
    <value>Image runs in the Windows GUI subsystem.</value>
  </data>
  <data name="IMAGE_SUBSYSTEM_XBOX" xml:space="preserve">
    <value>Image runs on XBOX.</value>
  </data>
  <data name="PROPID_ERROR_MSG_COLOR" xml:space="preserve">
    <value>ErrorMessageColors</value>
    <comment>The ErrorMessagesInColor checks this property for a default value.</comment>
  </data>
  <data name="RECOVERABLE_EXCEPTION_BACKCOLOR" xml:space="preserve">
    <value>RecoverableExceptionBackgroundColor</value>
    <comment>Key Name of RecoverableExceptionBackground PropertyColor</comment>
  </data>
  <data name="RECOVERABLE_EXCEPTION_FORECOLOR" xml:space="preserve">
    <value>RecoverablelExceptionTextColor</value>
    <comment>Key Name of RecoverablelExceptionTextColor Property</comment>
  </data>
  <data name="STACKTRACE_TPL" xml:space="preserve">
    <value>{1}Stack Trace Begin:{1}{0}{1}End of Stack Trace{1}{1}</value>
  </data>
  <data name="THIS_IS_THE_LAST" xml:space="preserve">
    <value>There are no further exceptions to report.{0}</value>
    <comment>Use this to report that there are no more inner exceptions.</comment>
  </data>
  <data name="PRODUCT_NAME_AND_VERSION_TPL" xml:space="preserve">
    <value>{0}, version {1}</value>
    <comment>StateManager.GetAssemblyProductAndVersion uses this string to format a version string for use as a window caption.</comment>
  </data>
  <data name="ERRMSG_STD_HANDLE_STATE" xml:space="preserve">
    <value>The StandardHandleState routine reported an exception.\nException Code = 0x{0} ({1} decimal): {2}</value>
    <comment>Static method GetStdHandleFQFN uses this string to format the error message that it returns when StandardHandleState returns an error.</comment>
  </data>
  <data name="MSG_APP_CHARACTER_MODE_APPS_ONLY" xml:space="preserve">
    <value>The GetStdHandleFQFN routine supports only character mode (console mode) applications.</value>
    <comment>Static method GetStdHandleFQFN returns this string when the calling routine originated in a graphical mode (GUI) program.</comment>
  </data>
  <data name="MSG_CONSOLE_HAS_STD_HANDLE" xml:space="preserve">
    <value>, NOT redirected</value>
    <comment>Static method GetStdHandleFQFN returns this string when the specified handle is attached to its console.</comment>
  </data>
  <data name="ERRMSG_CONFIG_FILE_IS_EMPTY" xml:space="preserve">
    <value>The specified DLL configuration file, {0}, exists, but is empty</value>
    <comment>The Abstract AssemblyLocatorBase class emits this message.</comment>
  </data>
  <data name="ERRMSG_MISSING_CONFIG_FILE" xml:space="preserve">
    <value>There is no valid configuration file for DLL file {0}.</value>
    <comment>The Abstract AssemblyLocatorBase class emits this message.</comment>
  </data>
  <data name="ERRMSG_NULL_ENHANCEDIOEXCEPTION" xml:space="preserve">
    <value>The EnhancedIOException is unexpectedly null, probably due to an internal error.</value>
    <comment>The SafeConsoleClear mothod uses this string to report an unexpected null reference returned by the JSON deserializer.</comment>
  </data>
  <data name="ERRMSG_HRESULT" xml:space="preserve">
    <value>HRESULT = {0} ({1} decimal){2}</value>
    <comment>Use this to display an HRESULT is both hexadecimal and decimal formats.</comment>
  </data>
  <data name="OUTPUT_OPTIONS_DISPLAY_FORMAT" xml:space="preserve">
    <value>OutputOptions {0}= {1} ({2} decimal = {3})</value>
    <comment>Used by ExceptionLogger method OutputOptionsDisplay</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYFILEBASENAME" xml:space="preserve">
    <value>    AssemblyFileBaseName = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYFILENAME" xml:space="preserve">
    <value>    AssemblyFileName     = {0}{1}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYGUIDSTRING" xml:space="preserve">
    <value>    AssemblyGuidString   = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBYDIRNAME" xml:space="preserve">
    <value>    AssembyDirName       = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_COMMENTS" xml:space="preserve">
    <value>    Comments             = {0}{1}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_COMPANYNAME" xml:space="preserve">
    <value>    CompanyName          = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_CULTURE" xml:space="preserve">
    <value>    Culture              = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_DESCRIPTION" xml:space="preserve">
    <value>    Description          = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_FILE_CREATION_DATE" xml:space="preserve">
    <value>    File Creation Date   = {0} ({1} UTC)</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_FILE_MODIFIED_DATE" xml:space="preserve">
    <value>    File Modified Date   = {0} ({1} UTC)</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_LEGALCOPYRIGHT" xml:space="preserve">
    <value>    LegalCopyright       = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_LEGALTRADEMARKS" xml:space="preserve">
    <value>    LegalTrademarks      = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_PRODUCTNAME" xml:space="preserve">
    <value>    ProductName          = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_PUBLICKEYTOKEN" xml:space="preserve">
    <value>    PublicKeyToken       = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_RUNTIME_VERSION" xml:space="preserve">
    <value>    Runtime Version      = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_SELECTED_DLL_PROPS_BEGIN" xml:space="preserve">
    <value>Selected properties of the library under test:{0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_SELECTED_DLL_PROPS_END" xml:space="preserve">
    <value>{0}End of selected properties{0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_VERSIONSTRING" xml:space="preserve">
    <value>    VersionString        = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="ERRMSG_INVALID_ERROREXITOPTIONS" xml:space="preserve">
    <value>An internal error has occurred.{1}Internal routine GetReservedErrorMessage was called with an invalid ErrorExitOptions value of {0}.</value>
    <comment>The ExceptionLogger.GetReservedErrorMessage uses this message to report that it was called with an invalid ErrorExitOptions value. </comment>
  </data>
  <data name="ERRMSG_RUNTIME_SEE_EVENT_LOG" xml:space="preserve">
    <value>A run-time exception forced the program to end prematurely.{0}Pleasr see he (0) event log for a message with event source = (0).</value>
    <comment>The ExceptionLogger.GetReservedErrorMessage uses this message to report that a run-time exception was reported in a Windows event log.</comment>
  </data>
  <data name="ERRMSG_RUNTIME_SEE_MESSAGE_ABOVE" xml:space="preserve">
    <value>A run-time exception forced the program to end prematurely.{0}Please see the message just above this line.</value>
    <comment>The ExceptionLogger.GetReservedErrorMessage uses this message to report that a run-time exception was reported in the consoue output stream.</comment>
  </data>
</root>