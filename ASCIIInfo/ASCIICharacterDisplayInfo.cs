/*
    ============================================================================

    Namespace:          WizardWrx

    Class Name:         ASCIICharacterDisplayInfo

    File Name:          ASCIICharacterDisplayInfo.cs

    Synopsis:           This class provides protected access to a collection of
                        display values for disambiguating displays, especially
                        those generated by system utilities.

    Remarks:            Some characters that would benefit from disambiguation
                        remain in their original, ambiguous form, because they
                        cannot be easily rendered unambiguously. In particular,
                        the high ASCII characters are mostly on their own. Hence,
                        the displays are augmented by numerical and hexadecimal
                        displays.

    License:            Copyright (C) 2014-2017, David A. Gray. 
						All rights reserved.

                        Redistribution and use in source and binary forms, with
                        or without modification, are permitted provided that the
                        following conditions are met:

                        *   Redistributions of source code must retain the above
                            copyright notice, this list of conditions and the
                            following disclaimer.

                        *   Redistributions in binary form must reproduce the
                            above copyright notice, this list of conditions and
                            the following disclaimer in the documentation and/or
                            other materials provided with the distribution.

                        *   Neither the name of David A. Gray, nor the names of
                            his contributors may be used to endorse or promote
                            products derived from this software without specific
                            prior written permission.

                        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                        CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
                        WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
                        PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
                        David A. Gray BE LIABLE FOR ANY DIRECT, INDIRECT,
                        INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
                        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                        PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
                        LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                        ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
                        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    Created:            Saturday, 19 July 2014

    ----------------------------------------------------------------------------
    Revision History
    ----------------------------------------------------------------------------

    Date       Version By  Synopsis
    ---------- ------- --- -----------------------------------------------------
    2014/07/19 1.0     DAG Initial implementation.

	2016/06/03 1.4     DAG Break the dependency on WizardWrx.SharedUtl2.dll,
                           correct misspelled words flagged by the spelling
                           checker add-in, and incorporate my three-clause BSD
                           license.

	2016/06/12 3.0     DAG 1) Add a new column for comments, and populate it.
                           2) Correct inconsistencies in the documentation, such
                              as the paragraph that refers to two constructors,
                              when there are now three public constructors.

	2017/08/04 7.0     DAG Relocated to the constellation of core libraries that
                           began as WizardWrx.DllServices2.dll.
    ============================================================================
*/


using System;
using System.Collections.Generic;
using System.Text;

namespace WizardWrx
{
    /// <summary>
    /// Instances of this class represent individual ASCII characters. Since the
    /// NUL character is defined, and occupies the first element, the numeric 
    /// code that corresponds to a character maps directly to the corresponding
    /// element in this array.
    /// </summary>
    /// <example>
    /// The ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,
    /// or ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for
    /// the space character.
    /// 
    /// Likewise, the ASCII code for a horizontal TAB character is 9. Hence, the
    /// C# expression ASCIICharacterDisplayInfo[9] evaluates to the information
    /// about the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the
    /// same thing in Visual Basic.
    /// 
    /// The following example comes from production code in the class library
    /// that motivated me to create this library.
    /// 
    ///     ASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;
    ///     StringBuilder sbTheBadChar = new StringBuilder ( );
    ///     sbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );
    /// 
    /// Obviously, more things go into the message before it is returned to the
    /// calling routine.
    /// </example>
    /// <see cref="ASCII_Character_Display_Table"/>
    public class ASCIICharacterDisplayInfo
    {
        uint _uintCode;
        string _strAlternateText;
		string _strComment;

        /// <summary>
        /// This constructor satisfies interfaces that require a default
        /// constructor. It is marked private because the assembly that owns all
        /// instances of this class uses one of the other two constructors.
        /// </summary>
        private ASCIICharacterDisplayInfo ( ) { }


        /// <summary>
        /// Create an instance for a character for which the alternate display
        /// is undefined because it is either unnecessary or impractical.
        /// </summary>
        /// <param name="puintCode">
        /// The code is an unsigned integer between zero and 255.
        /// </param>
        internal ASCIICharacterDisplayInfo ( uint puintCode )
        {
			InitializeInstance (
				puintCode ,				// uint puintCode
				null ,					// string pstrAlternateText
				null );					// string pstrComment
		}	// ASCIICharacterDisplayInfo (Public constructor 1 of 3)


        /// <summary>
        /// Create an instance for a character that has alternate display text.
        /// </summary>
        /// <param name="puintCode">
        /// The code is an unsigned integer between zero and 255.
        /// </param>
        /// <param name="pstrAlternateText">
        /// Specify alternate text to display in place of the actual character.
        /// </param>
        internal ASCIICharacterDisplayInfo (
            uint puintCode ,
            string pstrAlternateText )
        {
			InitializeInstance (
				puintCode ,				// uint puintCode
				pstrAlternateText ,		// string pstrAlternateText
				null );					// string pstrComment
		}	// ASCIICharacterDisplayInfo (Public constructor 2 of 3)


		/// <summary>
		/// Create an instance for a character that has alternate display text and/or a comment.
		/// </summary>
		/// <param name="puintCode">
		/// The code is an unsigned integer between zero and 255.
		/// </param>
		/// <param name="pstrAlternateText">
		/// Specify alternate text to display in place of the actual character.
		/// </param>
		/// <param name="pstrComment">
		/// Specify a comment to display next to the character or its display property.
		/// </param>
		internal ASCIICharacterDisplayInfo (
			uint puintCode ,
			string pstrAlternateText ,
			string pstrComment )
		{
			InitializeInstance (
				puintCode ,				// uint puintCode
				pstrAlternateText ,		// string pstrAlternateText
				pstrComment );			// string pstrComment
		}	// ASCIICharacterDisplayInfo (Public constructor 3 of 3)


        /// <summary>
        /// Gets the Unicode character represented by the code.
        /// </summary>
        public char ASCIICharacter
        { get { return ( char ) _uintCode; } }


        /// <summary>
        /// Gets the alternate text, if one exists, or returns the empty string.
        /// </summary>
        public string AlternateText
        {
            get
            {
                if ( string.IsNullOrEmpty ( _strAlternateText ) )
                    return string.Empty;
                else
                    return _strAlternateText;
            }   // AlternateText get method
        }   // AlternateText property


		/// <summary>
		/// Gets the associated comment, if one exists, or returns the empty
		/// string.
		/// </summary>
		public string Comment
		{
			get
			{
				if ( string.IsNullOrEmpty ( _strComment ) )
					return string.Empty;
				else
					return _strComment;
			}	// Comment property get method
		}	// Comment property


        /// <summary>
        /// Gets the raw ASCII code, as an unsigned integer.
        /// </summary>
        public uint Code
        { get { return _uintCode; } }


        /// <summary>
        /// Gets a string representation of the raw ASCII code, as a decimal
        /// number.
        /// </summary>
        public string CodeAsDecimal
        { get { return string.Format ( @"{0,3:N0}" , _uintCode ); } }


        /// <summary>
        /// Gets a string representation of the raw ASCII code, as a hexadecimal
        /// number.
        /// </summary>
        public string CodeAsHexadecimal
        { get { return string.Format ( @"0x{0:x2}" , _uintCode ); } }


        /// <summary>
        /// Gets the display text, regardless of source, from one place.
        /// </summary>
        public string DisplayText
        {
            get
            {
                if ( string.IsNullOrEmpty ( _strAlternateText ) )
                    return this.ASCIICharacter.ToString ( );
                else
                    return _strAlternateText;
            }   // DisplayText get method
        }   // DisplayText property


        /// <summary>
        /// All three public constructors use this routine to initialize everything.
        /// </summary>
        /// <param name="puintCode">
        /// The code is an unsigned integer between zero and 255.
        /// </param>
        /// <param name="pstrAlternateText">
        /// Specify alternate text to display in place of the actual character.
        /// </param>
		/// <param name="pstrComment">
		/// Specify a comment for optional display on listings.
		/// </param>
        private void InitializeInstance (
            uint puintCode , 
            string pstrAlternateText ,
			string pstrComment )
        {
            _uintCode = puintCode;

            if ( !string.IsNullOrEmpty ( pstrAlternateText ) )
                _strAlternateText = pstrAlternateText;

			if ( !string.IsNullOrEmpty ( pstrComment ) )
				_strComment = pstrComment;
		}   // InitializeInstance
    }   // class ASCIICharacterDisplayInfo
}   // partial namespace WizardWrx